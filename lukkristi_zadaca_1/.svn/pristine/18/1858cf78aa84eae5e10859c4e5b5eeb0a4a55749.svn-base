
package org.foi.nwtis.lukkristi.zadaca_1;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.Socket;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import org.foi.nwtis.lukkristi.konfiguracije.Konfiguracija;

/**
 *
 * @author lukkristi
 */
public class ZahtjevAviona extends Thread{
    private Socket socket;
    private Konfiguracija konfiguracija;
    private List<Korisnik> korisnici;
    List<Avion> avioni;
    private List<Aerodrom> aerodromi;
    boolean radi = true;
    int spavanje = -1;

    /**
     * Konstruktor klase, postavlja grupu dretve, ime dretve, konfiguraciju, dohvaća korisnike, aerdrome i avione
     * @param group grupa dretve
     * @param name naziv dretve
     * @param konfiguracija konfiguracija programa
     * @param korisnici lista korisnika
     * @param aerodromi lista aerodroma
     * @param avioni lista aviona
     */
    public ZahtjevAviona(ThreadGroup group, String name, Konfiguracija konfiguracija, List<Korisnik> korisnici, 
            List<Aerodrom> aerodromi, List<Avion>avioni) {
        super(group, name);
        this.aerodromi=aerodromi;
        this.avioni=avioni;
        this.korisnici=korisnici;
        this.konfiguracija = konfiguracija;
    }

    @Override
    public void interrupt() {
        super.interrupt(); 
    }

    @Override
    public void run() {
        while (radi) {
            System.out.println(this.getName() + " run");
            try {
                String line = zaprimanjeKomande();
                slanjeOdgovora(line);
                socket.shutdownOutput();
                socket.shutdownInput();
                socket.close();
                if(radi){
                    synchronized (this) {
                        wait();
                    }
                }               
            } catch (IOException | InterruptedException ex) {
                System.err.println(this.getName() + "prekid");
            }
        }
    }
    
    /**
     * Metoda šalje odgovor korisniku
     * @param line odgovor za korisnika
     * @throws IOException exception koji se može pojaviti prilikom slanja poruke na socket
     */
    public void slanjeOdgovora(String line) throws IOException {
        OutputStream os = socket.getOutputStream();
        
        String odgvor = provijeriKomandu(line);
        os.write(odgvor.getBytes());
        os.flush();
    }
    
    /**
     * Metoda zaprima komandu od korisnika
     * @return komandu primljenu od korisnika
     * @throws IOException exception koji se može pojaviti prilikom čitanja poruke sa socketa
     */
    public String zaprimanjeKomande() throws IOException {
        BufferedReader in = new BufferedReader(new InputStreamReader(socket.getInputStream(), "UTF-8"));
        String readLine = "";
        String line = "";
        while ((readLine = in.readLine()) != null) {
            line += readLine;
        }
        System.out.println(this.getName() + " primljeno: "
                + line);
        return line;
    }

    @Override
    public synchronized void start() {
        super.start();
    }

    private String provijeriKomandu(String komanda) {
        String poruka = "";
        String uzorak = "KORISNIK\\s+([A-ZČĆĐŠŽa-zčćđšž0-9-_]{3,10});\\s+LOZINKA\\s+([A-ZČĆĐŠŽa-zčćđšž0-9-#!]{3,10});\\s+"
                + "(KRAJ;|DODAJ\\s+([1-9]|1\\d|20);|UZLETIO\\s+([A-ZČĆĐŠŽa-zčćđšž0-9-]{3,});\\s+POLAZIŠTE\\s"
                + "([A-ZČĆĐŠŽ]{3,});\\s+ODREDIŠTE\\s+([A-ZČĆĐŠŽ]{3,});\\s"
                + "TRAJANJE\\s+(\\d*);)";
        Pattern p = Pattern.compile(uzorak);
        Matcher m = p.matcher(komanda);        
        if (m.matches()) {
            String korisnik = m.group(1);
            String lozinka = m.group(2);
            if (provijeriKorisnika(korisnik, lozinka)) {
                return odaberiAkciju(m, poruka);
            } else {
                return "ERROR 10; Krivi korisnik ili lozinka.";
            }
        } else {
            return "ERROR 02; Naredba nije ispravna.";
        }
    }
    
    /**
     * Provijera postoji li korisnik i ako da valja li lozinka korisnika
     * @param korisnik korisnik za provjeru
     * @param lozinka lozinka korisnika
     * @return postoji li korisnik
     */
    private boolean provijeriKorisnika(String korisnik, String lozinka) {
        for (Korisnik k : this.korisnici) {
            if (k.getKorime().equals(korisnik) && k.getLozinka().equals(lozinka)) {
                return true;
            }
        }
        return false;
    }

    private String odaberiAkciju(Matcher m, String poruka) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
    
}
